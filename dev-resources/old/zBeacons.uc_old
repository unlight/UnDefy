class zBeacons extends Info; // extends Info
/*
// todo: beacons InventorySpot
// beacons:
// если лифт то определить ближайшее оружие к  нему 'Linkgun lift'
//check repeats beacons // вынести в отдельный RI класс
// одинаковые пикапы: определять другой ближайший и дописать в конец
// тип локации: 1 - near pickup
//				2 - between p1 & p2
лифты
1. около LiftCenter есть всегда LiftExit
*/
const BeaconsLength = 25;
var() vector BeaconCoordinate[BeaconsLength];
var() string BeaconItemName[BeaconsLength];
//var() bool bBeaconsInitialized;
struct MyPickup{ var Pickup Pickup; var string PickupName; };
var array<MyPickup> MyPickups;
struct MyBeacon{ var vector Coordinate; var string ItemName; };
var array<MyBeacon> MyBeacons;

replication{
//	reliable if(bNetInitial && Role == Role_Authority) BeaconCoordinate, BeaconItemName;
}

auto state StartUp{
	Begin:
	ProcessPickups();
	ProcessNavigationPoints();
	Check();
}

function string NearestPickup(vector V){
	local float MaxDistance, Distance;
	local byte i;
	local string S;
	MaxDistance = 52.5 * 20;
	for(i = 0; i < MyPickups.Length; i++){
		Distance = VSize(V - MyPickups[i].Pickup.Location);
		if(Distance < MaxDistance){
			MaxDistance = Distance;
			S = MyPickups[i].PickupName;
		}
	}
	if(S != "") S = Repl(" (%P)", "%P", S);
	return S;
}
function string NearestBeacon(vector V){
	local float MinDistance, Distance;
	local byte i;
	local string S;
	MinDistance = 52.5 * 40;
	for(i = 0; i < MyBeacons.Length; i++){
		Distance = VSize(V - MyPickups[i].Pickup.Location);
		if(Distance > MinDistance) continue;
		MinDistance = Distance;
		S = MyBeacons[i].ItemName;
	}
	if(S != "") S = Repl(" (%P)", "%P", S);
	return S;
}

function ProcessNavigationPoints(){
	local NavigationPoint N;
	local string S;
	for(N = Level.NavigationPointList; N != None; N = N.NextNavigationPoint){
		S = "";
		if(N.IsA('WarpZoneMarker')){
			if(WarpZoneMarker(N).markedWarpZone != None) S = WarpZoneMarker(N).markedWarpZone.OtherSideURL;
			if(S != "") S = WarpZoneMarker(N).markedWarpZone.LocationName;
		}
		else if(N.IsA('Teleporter')){
			if(Teleporter(N).URL != "") S = "Teleport" @ Teleporter(N).URL;
			if(S != "") S = string(N.Tag);
		}
		else if(N.IsA('Door')) S = "Door" @ string(Door(N).DoorTag);
		else if(N.IsA('LiftCenter')) S = "Lift" $ NearestPickup(N.Location); //@ "(Inside)";
//		else if(N.IsA('LiftExit')) S = "Lift" $ NearestPickup(N.Location); // "(Ground Floor)";
		else if(N.IsA('JumpPad')) S = "Jump Pad" $ NearestPickup(N.Location);
		// InventorySpot
		if(S != "") SetBeacon(N.Location, S);
	}
}

function ProcessPickups(){
	local MyPickup MyPickup;
	local Pickup P;
	local string S;
	foreach DynamicActors(class'Pickup', P){
		if(P.IsA('WeaponPickup')) S = P.GetHumanReadableName();
		else if(P.IsA('UDamagePack')) S = "DOUBLE DAMAGE";
		else if(P.IsA('ShieldPickup')) S = ShieldPickup(P).ShieldAmount @ "Shield";
		else if(P.IsA('SuperHealthPack')) S = "Mega Health";
		else continue;
		MyPickup.Pickup = P;
		MyPickup.PickupName = S;
		MyPickups[MyPickups.Length] = MyPickup;
		SetBeacon(P.Location, S);
	}
}

function SetBeacon(vector Coordinate, string S){
	local MyBeacon MyBeacon;
	MyBeacon.Coordinate = Coordinate;
	MyBeacon.ItemName = S;
	MyBeacons[MyBeacons.Length] = MyBeacon;
}

function Check(){
	local int i;
	local Actor A;
	for(i = 0; i < MyBeacons.Length; i++){
		Debug(i @ MyBeacons[i].ItemName @ MyBeacons[i].Coordinate);
	}
	foreach AllActors(class'Actor', A){
		if(InventorySpot(A) != None) Debug("InventorySpot" @ A.GetHumanReadableName());
	}
	
}

simulated function Debug(coerce string S){
	class'zUtil'.static.Debug(S, Self);
}

defaultproperties{
	RemoteRole=ROLE_SimulatedProxy
	bAlwaysRelevant=True
}
