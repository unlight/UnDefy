class VoteMessage extends zLocalMessage;

#EXEC OBJ LOAD FILE=GeneralAmbience.uax

static function color GetColor(optional int N, optional PlayerReplicationInfo R1, optional PlayerReplicationInfo R2){
	if(N ==	-1) return MakeColor(250, 240, 240);
	if(N ==	-2) return MakeColor(250, 240, 240); // -2 - progress votes
	if(N > 0) return MakeColor(140, 140, 140);
}

static function string GetString(optional int N, optional PlayerReplicationInfo R1, optional PlayerReplicationInfo R2, optional Object O){
	if(N == -1 && R1 != None) return R1.PlayerName @ "has called a voting!";
	if(N == -2) return GetStringVoted(N, zVotingReplicationInfo(O) );
	if(N > 0) return GetStringVotedMask(N, zVotingReplicationInfo(O));
}

static function ClientReceive(PlayerController P, optional int N, optional PlayerReplicationInfo R1, optional PlayerReplicationInfo R2, optional Object O){
	if(N == -1){
		P.ClientPlaySound(sound'GeneralAmbience.texture15');
		P.ClientPlaySound(sound'GeneralAmbience.beep5');
	}
	Super.ClientReceive(P, N, R1, R2, O);
}

// abstained - воздержались
static function string GetStringVoted(int N, zVotingReplicationInfo V){
	return Repl("Voted Yes (%Y)", "%Y", V.Voted[1]) @ Repl("Voted No (%N)", "%N", V.Voted[0]);
}

static function string GetStringVotedMask(int N, zVotingReplicationInfo VRI){
	local string S, MapName;
	local array<byte> Mask;
	local byte i;
	MapName = Repl("(%S)", "%S", VRI.VotedMap);
	Mask = class'zUtil'.static.BitMaskArray(VRI.VotedMask);
	if(bool(Mask[0])) S @= "1on1";
	if(bool(Mask[2])) S @= "Restart Map";
	if(bool(Mask[3])) if(S != "") S @= MapName; else S @= "Change map" @ MapName;
	return S;
}

defaultproperties{
	Lifetime=5
	bFadeMessage=False
	bIsSpecial=True
	bIsPartiallyUnique=True
	PosY=0.29
	StackMode=SM_Down
}
