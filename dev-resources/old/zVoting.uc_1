class zVoting extends Mutator CacheExempt;

var zMain Main;
var array<string> Maps;
var array<string> FixedMaps;
var string VotedMap;
var int VotedMask;
var string TravelURL[5]; // 0 - map, 1 - game 2 - mutators, 3 - options
var zVotingReplicationInfo MyVRI;
var PlayerReplicationInfo Caller;
// перенести функции в объект
// делать вотинг репликатион инфо
// бит маска:
// 1(0) - 1v1,
// 2(1) - 2v2,
// 4(2) - рестарт карты,
// 8(3) - смена карты на...
// Level.ServerTravel( URL, false ); - смена карты Level.ServerTravel("?restart",false);
// cv timelimit 10 cv dd false, cv doubledamage false
// todo: получаем список мап, потом реплицируем ид, им€, на клиенте по ид получаем им€
// todo: врем€ голосовани€ (LifeSpan)

replication{
//	reliable if(Role == Role_Authority) VotedMap, VotedYes, VotedNo;
	reliable if(bNetDirty && Role == Role_Authority) MyVRI;
}

function PostBeginPlay(){
	local int i;
	local string S;
	Main = zMain(Owner);
	Level.Game.LoadMapList("DM", Maps);
	for(i = 0; i < Maps.Length; i++){
		S = Repl(Maps[i], "1on1-", "");
		S = Repl(S, "DE-", "");
		FixedMaps[i] = Repl(S, "DM-", "");
	}
//	for(i = 0; i < Maps.Length; i++) Debug("FixedMaps:" @ FixedMaps[i]);
//	Debug("Test PregMatch" @ class'zUtil'.static.PregMatch("0123456789", "34"));
}

function Mutate(string MutateString, PlayerController PC){
	local int i;
	local zUtil F;
	local string S;
	F = new class'zUtil';
	S = Left(MutateString, 8);
	// плэйер голосует
	if(S == "I'm vote"){
		MutateString -= "I'm vote";
		CastMyVote(PC, bool(MutateString));
		return;
	}
	// новое голосование
	// очистить в linked что он голосовал
	if(S != "CallVote"){ // сделать тут по типу reason
		NextMutator.Mutate(MutateString, PC);
		return;
	}else if(MyVRI != None){
		PC.ClientMessage("A vote in progress!");
		return;
	}
	MutateString -= "CallVote";
	// search vote params
	SearchMode(MutateString);
	SearchMap(MutateString);
	if(VotedMask != 0){
		Caller = PC.PlayerReplicationInfo;
		MyVRI = Spawn(class'zVotingReplicationInfo', Self);
//		MyVRI.LifeSpan = 10;
	}
}

function CastMyVote(PlayerController PC, bool B){
	local zLinkedReplicationInfo Linked;
	local string Rejected;
	local int N;
	local float VoteMass;
	Linked = class'zLinkedReplicationInfo'.static.Get(PC.PlayerReplicationInfo);
	if(Linked == None) return;
//	if(PC.PlayerReplicationInfo.bOnlySpectator) Rejected = "You are spectator!";
	// а если он передумал и захочет переголосовать?
//	else if(Linked.bVoted) Rejected = "You already voted!";
	if(Rejected != ""){ PC.ClientMessage(Rejected); return;	}
	Linked.bVoted = True;
	if(B) MyVRI.Voted[1]++;
	else MyVRI.Voted[0]++;
	// посылаем сообщение
//	BroadcastLocalizedMessage(class'VoteMessage',,,, MyVRI);
	// провер€ем на окончание голосовани€
	// который вызвал голосование уже проголосовал "за"
//	VoteMass = 100.0 / Level.Game.GetNumPlayers();
//	Debug("VoteMass" @ VoteMass);
//	if(Voted[1] * VoteMass > 50) VotePassed();
}
//function bool IsVoteFailed(){
//	return (VotedYes + VotedNo >= Level.Game.GetNumPlayers());
//}

function VotePassed(){
	Debug("__ VotePassed");
}

function SearchMode(string MutateString){
	local string Modes[2];
	local int i, k;
	local array<string> Matches;
	Modes[0] = "1/1v1/1x1/1on1/Duel";
	Modes[1] = "2/2v2/2x2/2on2";
	for(i = 0; i < ArrayCount(Modes); i++){
		if(Modes[i] == "") continue;
		Split(Modes[i], "/", Matches);
		for(k = 1; k < Matches.Length; k++){
			if(class'zUtil'.static.PregMatch(MutateString, Matches[i])){
				VotedMask += int(Matches[0]);
				if(i == 0){
					TravelURL[1] = "?game=xGame.xDeathMatch";
					TravelURL[3] = "?TimeLimit=15?DoubleDamage=False";
				}
				return;
			}
		}
	}
}

function string GetTravelURL(){
	local byte i;
	local string S;
	for(i = 0; i < ArrayCount(TravelURL); i++) S $= TravelURL[i];
	return S;
}

function SearchMap(string MutateString){
	local int i, j;
	local array<string> A;
	if(MutateString ~= "Restart"){ VotedMask += 4; return; }
	Split(MutateString, " ", A);
	for(j = 0; j < A.Length; j++){ // 1on1 rankin or rankin
		A[j] = class'zUtil'.static.Trim(A[j]);
		if(A[j] == "") continue;
		for(i = 0; i < FixedMaps.Length; i++){
			if(!class'zUtil'.static.PregMatch(FixedMaps[i], A[j])) continue;
			VotedMask += 8;
			VotedMap = Maps[i];
			TravelURL[0] = VotedMap;
			return;
		}
	}
}

simulated function Debug(coerce string S){
	class'zUtil'.static.Debug(S, Self);
}

defaultproperties{
	bAlwaysRelevant=True
	RemoteRole=ROLE_SimulatedProxy
}
