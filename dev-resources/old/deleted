//state StartUp{
//	event Tick(float Tick){
////		InitializeNavigationBeacons();
////		CheckNB();
//		GotoState('');
//	}
//	function InitializeNavigationBeacons(){
//		local Pickup P;
//		local string S;
//		local int i;
//		local NavigationPoint N;
//		if(bBeaconsInitialized) return;
//		i = 0;
//		foreach AllActors(class'Pickup', P){
//			if(P.IsA('WeaponPickup')) S = P.GetHumanReadableName();
//			else if(P.IsA('UDamagePack')) S = "DOUBLE DAMAGE";
//			else if(P.IsA('ShieldPickup')) S = ShieldPickup(P).ShieldAmount @ "Shield";
//			else if(P.IsA('SuperHealthPack')) S = "Mega Health";
//			else continue;
//			SetNavBeacon(i, P.Location, S);
//		}
///*		for(N = Level.NavigationPointList; N != None; N = N.NextNavigationPoint){
//			S = "";
//			if(N.IsA('WarpZoneMarker')){
//				if(WarpZoneMarker(N).markedWarpZone != None) S = WarpZoneMarker(N).markedWarpZone.OtherSideURL;
//				if(S != "") S = WarpZoneMarker(N).markedWarpZone.LocationName;
//			}
//			else if(N.IsA('Teleporter')){
//				if(Teleporter(N).URL != "") S = "Teleport" @ Teleporter(N).URL;
//				if(S != "") S = string(N.Tag);
//			}
//			else if(N.IsA('Door')) S = "Door" @ string(Door(N).DoorTag);
//			else if(N.IsA('LiftCenter')) S = "Lift" @ "(Inside)";
//			else if(N.IsA('LiftExit')) S = "Lift" @ "(Ground Floor)";
//			else if(N.IsA('JumpPad')) S = "Jump Pad"; // JumpPad(N).JumpTarget.GetHumanReadableName()
//			// InventorySpot
//			if(S != "") SetNavBeacon(i, N.Location, S);
//		}*/
//		if(i != 0) bBeaconsInitialized = True;
//	}
//	function SetNavBeacon(out int i, vector Coordinate, string S){
//		if(i > BeaconsLength) Warn("Count of 'Navigation Beacons' is too big!");
//		BeaconCoordinate[i] = Coordinate;
//		BeaconItemName[i] = S;
//		i = i + 1;
//	}
//}


/*static final postoperator string M(float Units){
	return int(Units / 52.5) $ "m";
}
static final postoperator string F(float Units){
	return (Units / 16) $ "f";
}*/

/*function CheckLinkedReplicationInfo(Pawn P, int I){ // DELETE LATER
	local LinkedReplicationInfo L1, L2;
	for(L2 = P.Controller.PlayerReplicationInfo.CustomReplicationInfo; L2 != None; L2 = L2.NextReplicationInfo){
		Debug("CheckLinkedReplicationInfo:" @ I @ L2.GetHumanReadableName());
	}
}*/

/*final function bool InteractionExists(name InteractionName, optional out int Index){
	local int i;
	for(i = 0; i < ViewportOwner.Actor.Player.LocalInteractions.Length; i++){
		if(ViewportOwner.Actor.Player.LocalInteractions[i].IsA(InteractionName)){
			Index = i;
			return True;
		}
	}
	return False;
}*/

/*final function bool ForceModelNeed(xPawn P, byte i){
	local bool b1, b2, b3;
	b1 = (P.AmbientGlow == Glowing[i]);
	b2 = (P.Skins[i] == MyBodySkin[i]);
	return (P.AmbientGlow != Glowing[i]);
	Debug("ForceModelNeed Checking" @ "Glow" @ b1 @ "Skins:" @ b2 @ "bForceModel" @ i @ bForceModel[i]);
//	if(P.AmbientGlow != Glowing[i] && bForceModel[i] == 1) return True;
//	if(bForceModel[i] != 1) return False;
//	if(P.Skins[i] == MyBodySkin[i]) return False;
//	if(P.AmbientGlow == Glowing[i]) return False;
//	return True;*/

/*
function Message(coerce string S, float Life){ // Hackly. Not real pickups passed to function
	local zLinkedReplicationInfo Linked;
	local string ItemString;
	Linked = class'zUtil'.static.GetLinkedReplicationInfo(ViewportOwner.Actor.PlayerReplicationInfo);
	if(Linked == None) return;
	if(Left(S, 12) == "You got the "){ // looks like weapon
		ItemString = Eval(Right(S, 1) == ".", Mid(S, 12, Len(S) - 13), Mid(S, 12));
		Linked.ReplicateLastPickupItem(ItemString, 1);
	}else if(S == class'ShieldPack'.static.GetLocalString()){
		ItemString = "50 Shield";
		Linked.ReplicateLastPickupItem(ItemString, 2);
	}else if(S == class'SuperShieldPack'.static.GetLocalString()){
		ItemString = "100 Shield";
		Linked.ReplicateLastPickupItem(ItemString, 2);
	}else if(S == class'UDamagePack'.static.GetLocalString()){
		ItemString = "DOUBLE DAMAGE";
		Linked.ReplicateLastPickupItem(ItemString, 2);
	}else if(S == class'SuperHealthPack'.static.GetLocalString()){
		ItemString = "Mega Health";
		Linked.ReplicateLastPickupItem(ItemString, 2);
	}
}*/


/*simulated function LoadInteraction(string I, PlayerController P){
//	local PlayerController P;
//	P = Level.GetLocalPlayerController();
	if(P != None && P.Player != None){
		//Debug("PackageInteraction" @ class'zUtil'.static.GetPackageName(Class, True) $ I);
		P.Player.InteractionMaster.AddInteraction(class'zUtil'.static.GetPackageName(Class, True) $ I, P.Player);
		// load client config
		P.ConsoleCommand("ClassicSniperSmoke" @ int(default.bClassicSniperSmoke));
		P.ConsoleCommand("WeaponViewShake" @ int(default.bMyWeaponViewShake));
		P.ConsoleCommand("DrawDamageIndicators" @ int(default.bDamageIndicators));
		P.ConsoleCommand("DrawDamageIndicators" @ int(default.bEnemyCam));
		SaveConfig();
		SetTimer(1, True);
	}
}*/